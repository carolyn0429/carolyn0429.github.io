{"version":3,"sources":["Title.js","NameList.js","DisplayNameList.js","SelectedName.js","NameSelector.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","totalNumber","names","length","react_default","a","createElement","React","Component","NameList","nameList","namelist","selectedIndex","console","log","newNameList","filter","index","setState","map","name","_this2","key","href","onClick","event","removeName","bind","DisplayNameList","showNameList","handleClick","assertThisInitialized","src_NameList","SelectedName","selectedName","NameSelector","isSelected","getRandomName","src_DisplayNameList","ref","src_SelectedName","refs","btn","setAttribute","num","Math","floor","random","App","src_Title","src_NameSelector","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e54497a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Title extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            totalNumber: this.props.names.length\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Remaining names: ({this.props.names.length})</p>\n                <p>Total names: ({this.state.totalNumber})</p>\n\n            </div>\n        );\n    }\n}\n\nexport default Title;\n","import React from \"react\";\n\nclass NameList extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            nameList: this.props.namelist,\n        }\n\n    }\n\n    removeName(selectedIndex) {\n        console.log(\"item to be deleted: \" + selectedIndex)\n        var newNameList = this.state.nameList.filter((index) => {\n            return index !== selectedIndex\n        })\n        this.setState({nameList: newNameList})\n    }\n\n    render(){\n        return (\n            <div>\n                <ul>\n                    {\n                        this.state.nameList.map(function(name, index){\n                            return <li key={ index}> {name}\n                            <a href='#' onClick={event=>this.removeName(name,event)}>[x]</a>\n                            </li>\n                        }.bind(this))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default NameList;\n","import React from \"react\";\nimport NameList from \"./NameList\";\n\nclass DisplayNameList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            nameList: this.props.names,\n            showNameList: false\n        }\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    handleClick() {\n        this.setState({\n            showNameList: true\n        })\n    }\n    render() {\n\n        return (\n            <div>\n                <button onClick={this.handleClick}>Display Whole Names</button>\n                {this.state.showNameList ? <NameList namelist={this.state.nameList}/> : null}\n            </div>\n        )\n    }\n\n}\n\n\nexport default DisplayNameList;\n","import React from \"react\";\n\nclass SelectedName extends React.Component {\n    constructor(props) {\n        super(props)\n\n    }\n\n    render(){\n        var selectedName = this.props.selectedName\n        return (\n            <div>\n               <p>Lucky star: {selectedName} </p>\n            </div>\n        );\n    }\n}\n\nexport default SelectedName;\n","import React from 'react';\nimport './App.css';\nimport DisplayNameList from \"./DisplayNameList\";\nimport SelectedName from \"./SelectedName\";\n\nclass NameSelector extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isSelected: false\n        }\n        this.selectedName = this.getRandomName(this.props.names)\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    render() {\n        return (<div>\n            <p>Click button to select the volunteer randomly</p>\n            <DisplayNameList names={this.props.names}/>\n            <button ref=\"btn\" onClick={this.handleClick} >Go</button>\n                {this.state.isSelected ? <SelectedName selectedName={this.selectedName}/> : null}\n        </div>\n        );\n    }\n\n    handleClick() {\n        this.refs.btn.setAttribute(\"disabled\", \"disabled\");\n        this.setState(state => ({\n            isSelected: !this.state.isSelected\n        }));\n\n        console.log(this.selectedName);\n    }\n\n    getRandomName(names) {\n        let num = Math.floor(Math.random() * names.length)\n\n        console.log('selected name is: ' + names[num])\n        return names[num]\n    }\n}\n\nexport default NameSelector;\n","import React from 'react';\nimport './App.css';\nimport Title from \"./Title\";\nimport NameSelector from \"./NameSelector\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        // Pass props to parent class\n        super(props);\n        // Set initial state\n        this.state = {\n            names: [\n                \"Carolyn Hung\",\n                \"Happy Lemon\",\n                \"Dharma Jaana\",\n                \"Dionísio Stacee\",\n                \"Aristocles Kenanyahu\",\n                \"Dex Loïc\",\n                \"Chanelle Otokar\"\n            ]\n\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Title names={this.state.names}/>\n                <NameSelector names={this.state.names}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}